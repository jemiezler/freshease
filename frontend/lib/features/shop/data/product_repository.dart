// ‡πÑ‡∏ü‡∏•‡πå: product_repository.dart
import '../domain/product.dart';

abstract class ProductRepository {
  Future<List<Product>> list({
    String q = '',
    // ‚ÄºÔ∏è 1. ‡∏•‡∏ö 'category' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å interface
    double min = 0,
    double max = 99999,
    Map<String, List<String>> filters = const {},
  });
}

/// Mock repo ‚Äì replace with HTTP later
class MockProductRepository implements ProductRepository {
  final _data = <Product>[
    Product(
      id: 1,
      name: 'Fresh Kale Bundle',
      price: 59,
      image: 'https://picsum.photos/400/300?1',
      category: 'Veggies',
      brand: 'Kazi Farmas',
    ),
    Product(
      id: 2,
      name: 'Organic Mango Pack',
      price: 99,
      image: 'https://picsum.photos/400/300?2',
      category: 'Fruits',
      brand: 'Malee',
    ),
    Product(
      id: 3,
      name: 'Cherry Tomatoes',
      price: 49,
      image: 'https://picsum.photos/400/300?3',
      category: 'Veggies',
      brand: 'Individual Collection',
    ),
    Product(
      id: 4,
      name: 'Thai Basil Leaves',
      price: 25,
      image: 'https://picsum.photos/400/300?4',
      category: 'Herbs',
    ),
    Product(
      id: 5,
      name: 'Avocado Set',
      price: 120,
      image: 'https://picsum.photos/400/300?5',
      category: 'Fruits',
      brand: 'Ifod',
    ),
    Product(
      id: 10,
      name: 'Egg Chicken Red',
      price: 1.99,
      image: 'https://picsum.photos/400/300?10',
      category: 'Dairy',
      brand: 'Kazi Farmas',
    ),
    Product(
      id: 11,
      name: 'Egg Chicken White',
      price: 1.50,
      image: 'https://picsum.photos/400/300?11',
      category: 'Dairy',
      brand: 'Individual Collection',
    ),
    Product(
      id: 12,
      name: 'Malee Tangerine Orange Juice',
      price: 65,
      image: 'https://picsum.photos/400/300?12',
      category: 'Beverages',
      brand: 'Malee',
    ),
    Product(
      id: 13,
      name: 'Malee Peach Juice',
      price: 65,
      image: 'https://picsum.photos/400/300?13',
      category: 'Beverages',
      brand: 'Malee',
    ),
  ];

  @override
  Future<List<Product>> list({
    String q = '',
    // ‚ÄºÔ∏è 2. ‡∏•‡∏ö 'category' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å parameter
    double min = 0,
    double max = 99999,
    Map<String, List<String>> filters = const {},
  }) async {
    await Future.delayed(const Duration(milliseconds: 120));

    // 3. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    final filterCategories = filters['categories'] ?? [];
    final filterBrands = filters['brands'] ?? [];

    return _data.where((p) {
      // ‚ÄºÔ∏è 4. FIX: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Search Bar (q)
      // ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á p.name ‡πÅ‡∏•‡∏∞ p.category
      final byQ =
          q.isEmpty ||
          p.name.toLowerCase().contains(q.toLowerCase()) ||
          p.category.toLowerCase().contains(q.toLowerCase());

      // ‚ÄºÔ∏è 5. FIX: ‡∏•‡∏ö byC (‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏ç‡∏´‡∏≤) ‡∏ó‡∏¥‡πâ‡∏á
      // final byC = category == 'All' || p.category == category; // üëà ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á

      // 6. ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Price Range (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      final byP = p.price >= min && p.price <= max;

      // ‚ÄºÔ∏è 7. FIX: ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ FilterPage (Categories Checkbox)
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ p.category ‡∏ï‡∏£‡∏á‡πÜ (‡∏à‡∏≤‡∏Å 'Fruits', 'Dairy' ‡∏Ø‡∏•‡∏Ø)
      final byFilterCategory =
          filterCategories.isEmpty || filterCategories.contains(p.category);

      // 8. ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ FilterPage (Brands Checkbox)
      final byFilterBrand =
          filterBrands.isEmpty ||
          (p.brand != null && filterBrands.contains(p.brand));

      // 9. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡∏•‡∏ö byC ‡∏≠‡∏≠‡∏Å)
      return byQ && byP && byFilterCategory && byFilterBrand;
    }).toList();
  }
}
